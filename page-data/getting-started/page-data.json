{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/getting-started","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Getting Started\",\n  \"description\": \"Getting Started page\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"To start with this, you need to just simply add the dependencies in the gradle file of app module like this\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-bash\"\n  }), \"implementation 'ja.burhanrashid52:photoeditor:1.1.0'\\n\")), mdx(\"p\", null, \"or you can also import the :photoeditor module from the sample for customization\"), mdx(\"h2\", {\n    \"id\": \"setting-up-the-view\"\n  }, \"Setting up the View\"), mdx(\"p\", null, \"First, you need to add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PhotoEditorView\"), \" in your XML layout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \" <ja.burhanrashid52.photoeditor.PhotoEditorView\\n        android:id=\\\"@+id/photoEditorView\\\"\\n        android:layout_width=\\\"match_parent\\\"\\n        android:layout_height=\\\"match_parent\\\"\\n        app:photo_src=\\\"@drawable/got_s\\\" />\\n\\n\")), mdx(\"p\", null, \"You can define your drawable or color resource directly using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"app:photo_src\")), mdx(\"p\", null, \"Your can set the image programmatically by getting source from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PhotoEditorView\"), \" which will return a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ImageView\"), \" so that you can load image from resources,file or (Picasso/Glide)\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"PhotoEditorView mPhotoEditorView = findViewById(R.id.photoEditorView);\\n\\nmPhotoEditorView.getSource().setImageResource(R.drawable.got);\\n\")), mdx(\"h2\", {\n    \"id\": \"building-a-photoeditor\"\n  }, \"Building a PhotoEditor\"), mdx(\"p\", null, \"To use the image editing feature you need to build a PhotoEditor which requires a Context and PhotoEditorView which we have set up in our XML layout\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"//Use custom font using latest support library\\nTypeface mTextRobotoTf = ResourcesCompat.getFont(this, R.font.roboto_medium);\\n\\n//loading font from assest\\nTypeface mEmojiTypeFace = Typeface.createFromAsset(getAssets(), \\\"emojione-android.ttf\\\");\\n\\nmPhotoEditor = new PhotoEditor.Builder(this, mPhotoEditorView)\\n         .setPinchTextScalable(true)\\n         .setDefaultTextTypeface(mTextRobotoTf)\\n         .setDefaultEmojiTypeface(mEmojiTypeFace)\\n         .build();\\n\")), mdx(\"p\", null, \"You can customize the properties in the PhotoEditor as per your requirement\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Property\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Usage\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setPinchTextScalable()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"set false to disable pinch to zoom on text insertion.By deafult its true\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setDefaultTextTypeface()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"set default text font to be added on image\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"setDefaultEmojiTypeface()\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"set default font specifc to add emojis\")))), mdx(\"p\", null, \"That's it we are done with setting up our library\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#setting-up-the-view","title":"Setting up the View"},{"url":"#building-a-photoeditor","title":"Building a PhotoEditor"}]},"frontmatter":{"title":"Getting Started","description":"Getting Started page"}}},"pageContext":{"id":"a8a2d2f2-635b-568f-aa2f-cc481594a4c4"}},"staticQueryHashes":["2575348879","2936798523","2940813629"]}