{"componentChunkName":"component---node-modules-gatsby-theme-document-src-templates-docs-js","path":"/features/saving","result":{"data":{"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Saving\",\n  \"description\": \"You can save image as a file or bitmap\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"saving-in-file\"\n  }, \"Saving in File\"), mdx(\"p\", null, \"You can save image as a file which needs to provide a file path with callback method when an edited image is saved\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \" mPhotoEditor.saveAsFile(filePath, new PhotoEditor.OnSaveListener() {\\n                 @Override\\n                 public void onSuccess(@NonNull String imagePath) {\\n                    Log.e(\\\"PhotoEditor\\\",\\\"Image Saved Successfully\\\");\\n                 }\\n\\n                 @Override\\n                 public void onFailure(@NonNull Exception exception) {\\n                     Log.e(\\\"PhotoEditor\\\",\\\"Failed to save Image\\\");\\n                 }\\n             });\\n\")), mdx(\"h2\", {\n    \"id\": \"saving-as-bitmap\"\n  }, \"Saving as Bitmap\"), mdx(\"p\", null, \"You can also save image as a bitmap using saveAsBitmap provides a callback with saved bitmap\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"  mPhotoEditor.saveAsBitmap(new PhotoEditor.OnSaveBitmap() {\\n                  @Override\\n                  public void onBitmapReady(@NonNull Bitmap saveBitmap) {\\n                     Log.e(\\\"PhotoEditor\\\",\\\"Image Saved Successfully\\\");\\n                  }\\n\\n                  @Override\\n                  public void onFailure(@NonNull Exception exception) {\\n                      Log.e(\\\"PhotoEditor\\\",\\\"Failed to save Image\\\");\\n                  }\\n              });\\n\")), mdx(\"h2\", {\n    \"id\": \"saving-with-options\"\n  }, \"Saving with Options\"), mdx(\"p\", null, \"You can also provide your custom options while saving the edited image. You need to use the SaveSettings shown below.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \" SaveSettings saveSettings = new SaveSettings.Builder()\\n                      .setClearViewsEnabled(true)\\n                      .setTransparencyEnabled(true)\\n                      .setCompressFormat(compressFormat)\\n                      .setCompressQuality(compressQuality)\\n                      .build();\\n\\n  mPhotoEditor.saveAsFile(filePath,saveSettings,new PhotoEditor.OnSaveListener() {\\n                  @Override\\n                  public void onSuccess(@NonNull String imagePath) {\\n                     Log.e(\\\"PhotoEditor\\\",\\\"Image Saved Successfully\\\");\\n                  }\\n\\n                  @Override\\n                  public void onFailure(@NonNull Exception exception) {\\n                      Log.e(\\\"PhotoEditor\\\",\\\"Failed to save Image\\\");\\n                  }\\n              });\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#saving-in-file","title":"Saving in File"},{"url":"#saving-as-bitmap","title":"Saving as Bitmap"},{"url":"#saving-with-options","title":"Saving with Options"}]},"frontmatter":{"title":"Saving","description":"You can save image as a file or bitmap"}}},"pageContext":{"id":"a56a9a67-44ef-5c6e-b4a4-e51dccf8397c"}},"staticQueryHashes":["2575348879","2936798523","2940813629"]}